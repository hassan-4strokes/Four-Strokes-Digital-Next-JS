{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Muhammad%20Hassan/Programming/Next%20JS/Projects/Four%20Strokes%20Digital/src/models/category.model.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst categorySchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: [true, \"Please Enter Category Name\"],\r\n      minLength: [3, \"Category Name Should Have Atleast 3 Characters\"],\r\n      unique: [true, \"Category Name Already Exists\"],\r\n    },\r\n\r\n    slug: {\r\n      type: String,\r\n      required: [true, \"Please Enter Category Slug\"],\r\n      unique: [true, \"Category Slug Already Exists\"],\r\n      lowercase: [true, \"Category Slug Should Be In Lowercase\"],\r\n      trim: [true, \"Category Slug Should Not Contain Spaces\"],\r\n    },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nconst Category =\r\n  mongoose.models?.categories || mongoose.model(\"categories\", categorySchema);\r\n\r\nexport default Category;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,iBAAiB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CACxC;IACE,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;YAAC;YAAG;SAAiD;QAChE,QAAQ;YAAC;YAAM;SAA+B;IAChD;IAEA,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,QAAQ;YAAC;YAAM;SAA+B;QAC9C,WAAW;YAAC;YAAM;SAAuC;QACzD,MAAM;YAAC;YAAM;SAA0C;IACzD;AACF,GACA;IAAE,YAAY;AAAK;AAGrB,MAAM,WACJ,yGAAA,CAAA,UAAQ,CAAC,MAAM,EAAE,cAAc,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,cAAc;uCAE/C"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Muhammad%20Hassan/Programming/Next%20JS/Projects/Four%20Strokes%20Digital/src/database/database.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst databaseConnection = async () => {\r\n  try {\r\n    await mongoose.connect(\"mongodb+srv://hassan4strokes:hassan4strokes@cluster0.pacbc.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\");\r\n    console.log(\"Database Connected Successfully!\");\r\n  } catch (error) {\r\n    console.log(`Some Error Occured While Connecting To Database : ${error}`);\r\n  }\r\n};\r\n\r\nexport default databaseConnection;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,qBAAqB;IACzB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,CAAC,kDAAkD,EAAE,OAAO;IAC1E;AACF;uCAEe"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Muhammad%20Hassan/Programming/Next%20JS/Projects/Four%20Strokes%20Digital/src/app/api/v1/categories/update-category/%5Bslug%5D/route.js"],"sourcesContent":["import Category from \"@/models/category.model\";\r\nimport databaseConnection from \"@/database/database\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\ndatabaseConnection();\r\n\r\nexport async function PUT(request, { params }) {\r\n  try {\r\n    const { slug } = params;\r\n\r\n    const reqBody = await request.json();\r\n    const { name, userSlug } = reqBody;\r\n\r\n    // const normalizeSlug = (slug) => {\r\n    //   return slug\r\n    //     .toLowerCase()\r\n    //     .replace(/\\s+/g, \"-\")\r\n    //     .replace(/[^\\w\\-]+/g, \"\")\r\n    //     .replace(/-+/g, \"-\")\r\n    //     .replace(/^-+/, \"\")\r\n    //     .replace(/-+$/, \"\");\r\n    // };\r\n\r\n    // const updatedSlug = normalizeSlug(userSlug);\r\n\r\n    // const existingCategory = await Category.findOne({ slug: updatedSlug });\r\n    // if (existingCategory && existingCategory.slug !== slug) {\r\n    //   return NextResponse.json(\r\n    //     {\r\n    //       success: false,\r\n    //       message: \"Category With This Slug Already Exists\",\r\n    //     },\r\n    //     {\r\n    //       status: 400,\r\n    //     }\r\n    //   );\r\n    // }\r\n\r\n    const category = await Category.findOneAndUpdate(\r\n      { slug },\r\n      { name, slug: userSlug },\r\n      { new: true, runValidators: true, useFindAndModify: false }\r\n    );\r\n\r\n    if (!category) {\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          message: \"Category Not Found\",\r\n        },\r\n        {\r\n          status: 404,\r\n        }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        message: \"Category Updated Successfully\",\r\n        category,\r\n      },\r\n      {\r\n        status: 200,\r\n      }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Some Error Occured While Updating Category\", error);\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        message: \"Category Updating Failed\",\r\n      },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,CAAA,GAAA,6HAAA,CAAA,UAAkB,AAAD;AAEV,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IAC3C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG;QAE3B,oCAAoC;QACpC,gBAAgB;QAChB,qBAAqB;QACrB,4BAA4B;QAC5B,gCAAgC;QAChC,2BAA2B;QAC3B,0BAA0B;QAC1B,2BAA2B;QAC3B,KAAK;QAEL,+CAA+C;QAE/C,0EAA0E;QAC1E,4DAA4D;QAC5D,8BAA8B;QAC9B,QAAQ;QACR,wBAAwB;QACxB,2DAA2D;QAC3D,SAAS;QACT,QAAQ;QACR,qBAAqB;QACrB,QAAQ;QACR,OAAO;QACP,IAAI;QAEJ,MAAM,WAAW,MAAM,oIAAA,CAAA,UAAQ,CAAC,gBAAgB,CAC9C;YAAE;QAAK,GACP;YAAE;YAAM,MAAM;QAAS,GACvB;YAAE,KAAK;YAAM,eAAe;YAAM,kBAAkB;QAAM;QAG5D,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,SAAS;YACX,GACA;gBACE,QAAQ;YACV;QAEJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;YACT;QACF,GACA;YACE,QAAQ;QACV;IAEJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,SAAS;QACX,GACA;YACE,QAAQ;QACV;IAEJ;AACF"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}